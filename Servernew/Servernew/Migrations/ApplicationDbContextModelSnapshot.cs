// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server;

#nullable disable

namespace Servernew.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Servernew.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Servernew.Models.MedicalBook", b =>
                {
                    b.Property<int>("MedicalBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalBookId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("MedicalBookId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalBooks");
                });

            modelBuilder.Entity("Servernew.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<int?>("MedicalBookId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("MedicalBookId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Servernew.Models.PastScheduleRecord", b =>
                {
                    b.Property<int>("PastscheduleRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PastscheduleRecordId"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScheduleRecordId")
                        .HasColumnType("int");

                    b.HasKey("PastscheduleRecordId");

                    b.HasIndex("ScheduleRecordId");

                    b.ToTable("PastScheduleRecords");
                });

            modelBuilder.Entity("Servernew.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Servernew.Models.ScheduleRecord", b =>
                {
                    b.Property<int>("ScheduleRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleRecordId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleRecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ScheduleRecords");
                });

            modelBuilder.Entity("Servernew.Models.Tooth", b =>
                {
                    b.Property<int>("ToothId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToothId"));

                    b.Property<string>("DescriptionTooth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("ToothNumber")
                        .HasColumnType("int");

                    b.HasKey("ToothId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Teeth");
                });

            modelBuilder.Entity("Servernew.Models.MedicalBook", b =>
                {
                    b.HasOne("Servernew.Models.Patient", "Patient")
                        .WithMany("MedicalBooks")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Servernew.Models.MedicalRecord", b =>
                {
                    b.HasOne("Servernew.Models.MedicalBook", "MedicalBook")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("MedicalBookId");

                    b.Navigation("MedicalBook");
                });

            modelBuilder.Entity("Servernew.Models.PastScheduleRecord", b =>
                {
                    b.HasOne("Servernew.Models.ScheduleRecord", "ScheduleRecord")
                        .WithMany("PastScheduleRecords")
                        .HasForeignKey("ScheduleRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleRecord");
                });

            modelBuilder.Entity("Servernew.Models.ScheduleRecord", b =>
                {
                    b.HasOne("Servernew.Models.Doctor", "Doctor")
                        .WithMany("ScheduleRecords")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Servernew.Models.Patient", "Patient")
                        .WithMany("ScheduleRecords")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Servernew.Models.Tooth", b =>
                {
                    b.HasOne("Servernew.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Teeth")
                        .HasForeignKey("MedicalRecordId");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Servernew.Models.Doctor", b =>
                {
                    b.Navigation("ScheduleRecords");
                });

            modelBuilder.Entity("Servernew.Models.MedicalBook", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("Servernew.Models.MedicalRecord", b =>
                {
                    b.Navigation("Teeth");
                });

            modelBuilder.Entity("Servernew.Models.Patient", b =>
                {
                    b.Navigation("MedicalBooks");

                    b.Navigation("ScheduleRecords");
                });

            modelBuilder.Entity("Servernew.Models.ScheduleRecord", b =>
                {
                    b.Navigation("PastScheduleRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
